# coding: utf-8

"""
    IamBackoffice Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from iambackoffice.models.iambackoffice_user_registration import IambackofficeUserRegistration
from iambackoffice.models.iambackoffice_user_two_factor_configuration import IambackofficeUserTwoFactorConfiguration
from typing import Optional, Set
from typing_extensions import Self

class IambackofficeUser(BaseModel):
    """
    IambackofficeUser
    """ # noqa: E501
    active: Optional[StrictBool] = None
    birth_date: Optional[StrictStr] = Field(default=None, alias="birthDate")
    data: Optional[Dict[str, StrictStr]] = None
    email: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    id: Optional[StrictStr] = None
    image_url: Optional[StrictStr] = Field(default=None, alias="imageUrl")
    insert_instant: Optional[StrictStr] = Field(default=None, alias="insertInstant")
    last_login_instant: Optional[StrictStr] = Field(default=None, alias="lastLoginInstant")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    last_update_instant: Optional[StrictStr] = Field(default=None, alias="lastUpdateInstant")
    middle_name: Optional[StrictStr] = Field(default=None, alias="middleName")
    mobile_phone: Optional[StrictStr] = Field(default=None, alias="mobilePhone")
    password: Optional[StrictStr] = None
    password_change_required: Optional[StrictBool] = Field(default=None, alias="passwordChangeRequired")
    password_last_update_instant: Optional[StrictStr] = Field(default=None, alias="passwordLastUpdateInstant")
    preferred_languages: Optional[List[StrictStr]] = Field(default=None, alias="preferredLanguages")
    registrations: Optional[List[IambackofficeUserRegistration]] = None
    timezone: Optional[StrictStr] = None
    two_factor: Optional[IambackofficeUserTwoFactorConfiguration] = Field(default=None, alias="twoFactor")
    username: Optional[StrictStr] = None
    verified: Optional[StrictBool] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["active", "birthDate", "data", "email", "firstName", "fullName", "id", "imageUrl", "insertInstant", "lastLoginInstant", "lastName", "lastUpdateInstant", "middleName", "mobilePhone", "password", "passwordChangeRequired", "passwordLastUpdateInstant", "preferredLanguages", "registrations", "timezone", "twoFactor", "username", "verified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IambackofficeUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in registrations (list)
        _items = []
        if self.registrations:
            for _item_registrations in self.registrations:
                if _item_registrations:
                    _items.append(_item_registrations.to_dict())
            _dict['registrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of two_factor
        if self.two_factor:
            _dict['twoFactor'] = self.two_factor.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IambackofficeUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "birthDate": obj.get("birthDate"),
            "data": obj.get("data"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "fullName": obj.get("fullName"),
            "id": obj.get("id"),
            "imageUrl": obj.get("imageUrl"),
            "insertInstant": obj.get("insertInstant"),
            "lastLoginInstant": obj.get("lastLoginInstant"),
            "lastName": obj.get("lastName"),
            "lastUpdateInstant": obj.get("lastUpdateInstant"),
            "middleName": obj.get("middleName"),
            "mobilePhone": obj.get("mobilePhone"),
            "password": obj.get("password"),
            "passwordChangeRequired": obj.get("passwordChangeRequired"),
            "passwordLastUpdateInstant": obj.get("passwordLastUpdateInstant"),
            "preferredLanguages": obj.get("preferredLanguages"),
            "registrations": [IambackofficeUserRegistration.from_dict(_item) for _item in obj["registrations"]] if obj.get("registrations") is not None else None,
            "timezone": obj.get("timezone"),
            "twoFactor": IambackofficeUserTwoFactorConfiguration.from_dict(obj["twoFactor"]) if obj.get("twoFactor") is not None else None,
            "username": obj.get("username"),
            "verified": obj.get("verified")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


